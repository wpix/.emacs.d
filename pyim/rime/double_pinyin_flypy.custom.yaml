patch:
  schema/dependencies: {}
  schema/name: "double_pinyin_flypy"
  translator:
    dictionary: november
    enable_sentence: false
    # 把preedit里的 ' 删除
    preedit_format:
      - "xform/'//"
  engine:
    translators:
      - echo_translator
  # preedit分隔符改成 '
  "speller/delimiter": "'"

  # default chinese input method
  switches:                   # 注意缩进
    - name: ascii_mode
      reset: 0
      states: [ 中文, 西文 ]
    - name: full_shape
      states: [ 半角, 全角 ]   # 而全／半角则可沿用之前方案的用法。
    - name: simplification
      reset: 1                # 增加这一行：默认启用「繁→簡」转换。
      states: [ 漢字, 汉字 ]

  "key_binder/bindings":
    - { when: paging, accpet: comma, send: Page_Up}
    - { when: has_menu, accept: period, send: Page_Down}
    - { when: composing, accept: Return, send: Escape }
    - { when: has_menu, accept: semicolon, send: 2 }
    - { when: has_menu, accept: apostrophe, send: 3 }

  # 加載 easy_en 依賴
  "schema/dependencies/@next": easy_en
  # 載入翻譯英文的碼表翻譯器，取名爲 english
  "engine/translators/@next": table_translator@english
  # english 翻譯器的設定項
  english:
    dictionary: easy_en
    spelling_hints: 9
    enable_completion: true
    enable_sentence: false
    initial_quality: -2
    comment_format:
      - "xform/[~a-z]*//"
  simplifier:
    option_name: zh_simp

  "punctuator/import_preset": alternative
  "key_binder/import_preset": alternative

  recognizer/patterns/punct: "^/([a-z]+|[0-9]0?)$"

  # 模糊拼音
   'speller/algebra/@after last': 'abbrev/^(.).+$/$1/'
   "speller/algebra/@before 1": xform/^([b-df-hj-np-tv-z])$/$1_/
   "speller/algebra/@before 2": derive/([ei])n$/$1ng/            # 模糊拼音 en => eng, in => ing
   "speller/algebra/@before 3": derive/([ei])ng$/$1n/            # 模糊拼音 eng => en, ing => in
   "speller/algebra/@before 4": derive/^n/l/                     # 模糊拼音 n => l
   "speller/algebra/@before 5": derive/^l/n/                     # 模糊拼音 l => n
   "speller/algebra/@before 6": derive/ou$/uo/                   # 模糊拼音 ou => uo
   "speller/algebra/@before 7": derive/uo$/ou/                   # 模糊拼音 uo => ou